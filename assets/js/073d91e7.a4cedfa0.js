"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[6408],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),i=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=i(n),f=o,m=u["".concat(l,".").concat(f)]||u[f]||d[f]||s;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,a=new Array(s);a[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var i=2;i<s;i++)a[i]=n[i];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},42943:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>s,metadata:()=>c,toc:()=>i});var r=n(87462),o=(n(67294),n(3905));const s={},a="rsysnc",c={unversionedId:"Scripts/shell/Rsync",id:"Scripts/shell/Rsync",title:"rsysnc",description:"\u591a\u8fdb\u7a0b\u5e76\u53d1\u4f20\u8f93\u811a\u672c\uff1a",source:"@site/docs/Scripts/shell/Rsync.md",sourceDirName:"Scripts/shell",slug:"/Scripts/shell/Rsync",permalink:"/docs/Scripts/shell/Rsync",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Scripts/shell/Rsync.md",tags:[],version:"current",frontMatter:{},sidebar:"scripts",previous:{title:"Redis \u5feb\u901f\u811a\u672c",permalink:"/docs/Scripts/shell/Redis tools"},next:{title:"Shell\u5e76\u53d1",permalink:"/docs/Scripts/shell/Shell \u5e76\u53d1"}},l={},i=[],p={toc:i};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"rsysnc"},"rsysnc"),(0,o.kt)("p",null,"\u591a\u8fdb\u7a0b\u5e76\u53d1\u4f20\u8f93\u811a\u672c\uff1a"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'#!/usr/bin/env bash\n \n# Define source, target, maxdepth and cd to source\nsource="/tmp/tmp_data"\ntarget="/tmp/tmp_data2"\ndepth=3\ncd "${source}"\n \n# Set the maximum number of concurrent rsync threads\nmaxthreads=5\n# How long to wait before checking the number of rsync threads again\nsleeptime=5\n \n# Find all folders in the source directory within the maxdepth level\nfind . -maxdepth ${depth} -type d | while read dir\ndo\n       # Make sure to ignore the parent folder\n       if [ `echo "${dir}" | awk -F\'/\' \'{print NF}\'` -gt ${depth} ]\n       then\n           # Strip leading dot slash\n           subfolder=$(echo "${dir}" | sed \'s@^\\./@@g\')\n           if [ ! -d "${target}/${subfolder}" ]\n           then\n               # Create destination folder\n               mkdir -p "${target}/${subfolder}"\n           fi\n           # Make sure the number of rsync threads running is below the threshold\n           while [ `ps -ef | grep -w [r]sync | awk \'{print $NF}\' | sort -nr | uniq | wc -l` -ge ${maxthreads} ]\n           do\n               echo "Sleeping ${sleeptime} seconds"\n               sleep ${sleeptime}\n           done\n           # Run rsync in background for the current subfolder and move one to the next one\n           nohup rsync -avP "${source}/${subfolder}/" "${target}/${subfolder}/" </dev/null >/dev/null 2>&1 &\n       fi\ndone\n \n# Find all files above the maxdepth level and rsync them as well\nfind . -maxdepth ${depth} -type f -print0 | rsync -avP --files-from=- --from0 ./ "${target}/"\n')))}d.isMDXComponent=!0}}]);