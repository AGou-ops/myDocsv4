"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[5075],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var a=t(67294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=a.createContext({}),i=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=i(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=i(t),d=s,h=m["".concat(c,".").concat(d)]||m[d]||u[d]||r;return t?a.createElement(h,l(l({ref:n},p),{},{components:t})):a.createElement(h,l({ref:n},p))}));function d(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:s,l[1]=o;for(var i=2;i<r;i++)l[i]=t[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},77564:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>i});var a=t(87462),s=(t(67294),t(3905));const r={},l=void 0,o={unversionedId:"CloudNative/k8s/Installation/\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5",id:"CloudNative/k8s/Installation/\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5",title:"\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5",description:"flannel",source:"@site/docs/CloudNative/k8s/Installation/\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5.md",sourceDirName:"CloudNative/k8s/Installation",slug:"/CloudNative/k8s/Installation/\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5",permalink:"/docs/CloudNative/k8s/Installation/\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/CloudNative/k8s/Installation/\u5e38\u7528\u7ec4\u4ef6\u5b89\u88c5.md",tags:[],version:"current",frontMatter:{},sidebar:"cloudNative",previous:{title:"\u4f7f\u7528\u56fd\u5185\u6e90\u53ca\u76f8\u5173\u5c0f\u5de5\u5177",permalink:"/docs/CloudNative/k8s/Installation/\u4f7f\u7528\u56fd\u5185\u6e90\u53ca\u76f8\u5173\u5c0f\u5de5\u5177"},next:{title:"Quicklystart",permalink:"/docs/category/quicklystart"}},c={},i=[{value:"flannel",id:"flannel",level:2},{value:"nginx-ingress",id:"nginx-ingress",level:2},{value:"rancher",id:"rancher",level:2},{value:"metrics-server",id:"metrics-server",level:2}],p={toc:i};function u(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"flannel"},"flannel"),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"},"For Kubernetes v1.17+"),(0,s.kt)("h4",{parentName:"blockquote",id:"deploying-flannel-with-kubectl"},"Deploying Flannel with kubectl"),(0,s.kt)("pre",{parentName:"blockquote"},(0,s.kt)("code",{parentName:"pre"},"kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml\n")),(0,s.kt)("p",{parentName:"blockquote"},"If you use custom ",(0,s.kt)("inlineCode",{parentName:"p"},"podCIDR")," (not ",(0,s.kt)("inlineCode",{parentName:"p"},"10.244.0.0/16"),") you first need to download the above manifest and modify the network to match your one."),(0,s.kt)("h4",{parentName:"blockquote",id:"deploying-flannel-with-helm"},"Deploying Flannel with helm"),(0,s.kt)("pre",{parentName:"blockquote"},(0,s.kt)("code",{parentName:"pre"},'# Needs manual creation of namespace to avoid helm error\nkubectl create ns kube-flannel\nkubectl label --overwrite ns kube-flannel pod-security.kubernetes.io/enforce=privileged\n\nhelm repo add flannel https://flannel-io.github.io/flannel/\nhelm install flannel --set podCidr="10.244.0.0/16" --namespace kube-flannel flannel/flannel\n')),(0,s.kt)("p",{parentName:"blockquote"},"See ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flannel-io/flannel/blob/master/Documentation/kubernetes.md"},"Kubernetes")," for more details."),(0,s.kt)("p",{parentName:"blockquote"},"In case a firewall is configured ensure to enable the right port used by the configured ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/flannel-io/flannel/blob/master/Documentation/backends.md"},"backend"),"."),(0,s.kt)("p",{parentName:"blockquote"},"Flannel uses ",(0,s.kt)("inlineCode",{parentName:"p"},"portmap")," as CNI network plugin by default; when deploying Flannel ensure that the ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/containernetworking/plugins"},"CNI Network plugins")," are installed in ",(0,s.kt)("inlineCode",{parentName:"p"},"/opt/cni/bin")," the latest binaries can be downloaded with the following commands:"),(0,s.kt)("pre",{parentName:"blockquote"},(0,s.kt)("code",{parentName:"pre"},"mkdir -p /opt/cni/bin\ncurl -O -L https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz\ntar -C /opt/cni/bin -xzf cni-plugins-linux-amd64-v1.2.0.tgz\n"))),(0,s.kt)("h2",{id:"nginx-ingress"},"nginx-ingress"),(0,s.kt)("p",null,"\u88f8\u673a\uff08\u6216\u8005\u865a\u62df\u673a\uff09\uff0c\u4e5f\u5c31\u662f\u975e\u4e91\u4e0a\u73af\u5883\u5b89\u88c5\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.8.0/deploy/static/provider/baremetal/deploy.yaml\n")),(0,s.kt)("p",null,"\u68c0\u67e5\u7248\u672c\u53ca\u5b89\u88c5\u60c5\u51b5\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"POD_NAMESPACE=ingress-nginx\nPOD_NAME=$(kubectl get pods -n $POD_NAMESPACE -l app.kubernetes.io/name=ingress-nginx --field-selector=status.phase=Running -o name)\nkubectl exec $POD_NAME -n $POD_NAMESPACE -- /nginx-ingress-controller --version\n")),(0,s.kt)("h2",{id:"rancher"},"rancher"),(0,s.kt)("p",null,"\u8bc1\u4e66\u4e00\u952e\u811a\u672c\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash -e\n\nhelp ()\n{\n    echo  \' ================================================================ \'\n    echo  \' --ssl-domain: \u751f\u6210ssl\u8bc1\u4e66\u9700\u8981\u7684\u4e3b\u57df\u540d\uff0c\u5982\u4e0d\u6307\u5b9a\u5219\u9ed8\u8ba4\u4e3alocalhost\uff0c\u5982\u679c\u662fip\u8bbf\u95ee\u670d\u52a1\uff0c\u5219\u53ef\u5ffd\u7565\uff1b\'\n    echo  \' --ssl-trusted-ip: \u4e00\u822cssl\u8bc1\u4e66\u53ea\u4fe1\u4efb\u57df\u540d\u7684\u8bbf\u95ee\u8bf7\u6c42\uff0c\u6709\u65f6\u5019\u9700\u8981\u4f7f\u7528ip\u53bb\u8bbf\u95eeserver\uff0c\u90a3\u4e48\u9700\u8981\u7ed9ssl\u8bc1\u4e66\u6dfb\u52a0\u6269\u5c55IP\uff0c\u591a\u4e2aIP\u7528\u9017\u53f7\u9694\u5f00\uff1b\'\n    echo  \' --ssl-trusted-domain: \u5982\u679c\u60f3\u591a\u4e2a\u57df\u540d\u8bbf\u95ee\uff0c\u5219\u6dfb\u52a0\u6269\u5c55\u57df\u540d\uff08SSL_TRUSTED_DOMAIN\uff09,\u591a\u4e2a\u6269\u5c55\u57df\u540d\u7528\u9017\u53f7\u9694\u5f00\uff1b\'\n    echo  \' --ssl-size: ssl\u52a0\u5bc6\u4f4d\u6570\uff0c\u9ed8\u8ba42048\uff1b\'\n    echo  \' --ssl-date: ssl\u6709\u6548\u671f\uff0c\u9ed8\u8ba410\u5e74\uff1b\'\n    echo  \' --ca-date: ca\u6709\u6548\u671f\uff0c\u9ed8\u8ba410\u5e74\uff1b\'\n    echo  \' --ssl-cn: \u56fd\u5bb6\u4ee3\u7801(2\u4e2a\u5b57\u6bcd\u7684\u4ee3\u53f7),\u9ed8\u8ba4CN;\'\n    echo  \' \u4f7f\u7528\u793a\u4f8b:\'\n    echo  \' ./create_self-signed-cert.sh --ssl-domain=www.test.com --ssl-trusted-domain=www.test2.com \\ \'\n    echo  \' --ssl-trusted-ip=1.1.1.1,2.2.2.2,3.3.3.3 --ssl-size=2048 --ssl-date=3650\'\n    echo  \' ================================================================\'\n}\n\ncase "$1" in\n    -h|--help) help; exit;;\nesac\n\nif [[ $1 == \'\' ]];then\n    help;\n    exit;\nfi\n\nCMDOPTS="$*"\nfor OPTS in $CMDOPTS;\ndo\n    key=$(echo ${OPTS} | awk -F"=" \'{print $1}\' )\n    value=$(echo ${OPTS} | awk -F"=" \'{print $2}\' )\n    case "$key" in\n        --ssl-domain) SSL_DOMAIN=$value ;;\n        --ssl-trusted-ip) SSL_TRUSTED_IP=$value ;;\n        --ssl-trusted-domain) SSL_TRUSTED_DOMAIN=$value ;;\n        --ssl-size) SSL_SIZE=$value ;;\n        --ssl-date) SSL_DATE=$value ;;\n        --ca-date) CA_DATE=$value ;;\n        --ssl-cn) CN=$value ;;\n    esac\ndone\n\n#CA\u76f8\u5173\u914d\u7f6e\nCA_DATE=${CA_DATE:-3650}\nCA_KEY=${CA_KEY:-cakey.pem}\nCA_CERT=${CA_CERT:-cacerts.pem}\nCA_DOMAIN=localhost\n\n#ssl\u76f8\u5173\u914d\u7f6e\nSSL_CONFIG=${SSL_CONFIG:-$PWD/openssl.cnf}\nSSL_DOMAIN=${SSL_DOMAIN:-localhost}\nSSL_DATE=${SSL_DATE:-3650}\nSSL_SIZE=${SSL_SIZE:-2048}\n\n##\u56fd\u5bb6\u4ee3\u7801(2\u4e2a\u5b57\u6bcd\u7684\u4ee3\u53f7),\u9ed8\u8ba4CN;\nCN=${CN:-CN}\n\nSSL_KEY=$SSL_DOMAIN.key\nSSL_CSR=$SSL_DOMAIN.csr\nSSL_CERT=$SSL_DOMAIN.crt\n\necho -e "\\033[32m ---------------------------- \\033[0m"\necho -e "\\033[32m       | \u751f\u6210 SSL Cert |       \\033[0m"\necho -e "\\033[32m ---------------------------- \\033[0m"\n\nif [[ -e ./${CA_KEY} ]]; then\n    echo -e "\\033[32m ====> 1. \u53d1\u73b0\u5df2\u5b58\u5728CA\u79c1\u94a5\uff0c\u5907\u4efd"${CA_KEY}"\u4e3a"${CA_KEY}"-bak\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa \\033[0m"\n    mv ${CA_KEY} "${CA_KEY}"-bak\n    openssl genrsa -out ${CA_KEY} ${SSL_SIZE}\nelse\n    echo -e "\\033[32m ====> 1. \u751f\u6210\u65b0\u7684CA\u79c1\u94a5 ${CA_KEY} \\033[0m"\n    openssl genrsa -out ${CA_KEY} ${SSL_SIZE}\nfi\n\nif [[ -e ./${CA_CERT} ]]; then\n    echo -e "\\033[32m ====> 2. \u53d1\u73b0\u5df2\u5b58\u5728CA\u8bc1\u4e66\uff0c\u5148\u5907\u4efd"${CA_CERT}"\u4e3a"${CA_CERT}"-bak\uff0c\u7136\u540e\u91cd\u65b0\u521b\u5efa \\033[0m"\n    mv ${CA_CERT} "${CA_CERT}"-bak\n    openssl req -x509 -sha256 -new -nodes -key ${CA_KEY} -days ${CA_DATE} -out ${CA_CERT} -subj "/C=${CN}/CN=${CA_DOMAIN}"\nelse\n    echo -e "\\033[32m ====> 2. \u751f\u6210\u65b0\u7684CA\u8bc1\u4e66 ${CA_CERT} \\033[0m"\n    openssl req -x509 -sha256 -new -nodes -key ${CA_KEY} -days ${CA_DATE} -out ${CA_CERT} -subj "/C=${CN}/CN=${CA_DOMAIN}"\nfi\n\necho -e "\\033[32m ====> 3. \u751f\u6210Openssl\u914d\u7f6e\u6587\u4ef6 ${SSL_CONFIG} \\033[0m"\ncat > ${SSL_CONFIG} <<EOM\n[req]\nreq_extensions = v3_req\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n[ v3_req ]\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\nextendedKeyUsage = clientAuth, serverAuth\nEOM\n\nif [[ -n ${SSL_TRUSTED_IP} || -n ${SSL_TRUSTED_DOMAIN} ]]; then\n    cat >> ${SSL_CONFIG} <<EOM\nsubjectAltName = @alt_names\n[alt_names]\nEOM\n    IFS=","\n    dns=(${SSL_TRUSTED_DOMAIN})\n    dns+=(${SSL_DOMAIN})\n    for i in "${!dns[@]}"; do\n      echo DNS.$((i+1)) = ${dns[$i]} >> ${SSL_CONFIG}\n    done\n\n    if [[ -n ${SSL_TRUSTED_IP} ]]; then\n        ip=(${SSL_TRUSTED_IP})\n        for i in "${!ip[@]}"; do\n          echo IP.$((i+1)) = ${ip[$i]} >> ${SSL_CONFIG}\n        done\n    fi\nfi\n\necho -e "\\033[32m ====> 4. \u751f\u6210\u670d\u52a1SSL KEY ${SSL_KEY} \\033[0m"\nopenssl genrsa -out ${SSL_KEY} ${SSL_SIZE}\n\necho -e "\\033[32m ====> 5. \u751f\u6210\u670d\u52a1SSL CSR ${SSL_CSR} \\033[0m"\nopenssl req -sha256 -new -key ${SSL_KEY} -out ${SSL_CSR} -subj "/C=${CN}/CN=${SSL_DOMAIN}" -config ${SSL_CONFIG}\n\necho -e "\\033[32m ====> 6. \u751f\u6210\u670d\u52a1SSL CERT ${SSL_CERT} \\033[0m"\nopenssl x509 -sha256 -req -in ${SSL_CSR} -CA ${CA_CERT} \\\n    -CAkey ${CA_KEY} -CAcreateserial -out ${SSL_CERT} \\\n    -days ${SSL_DATE} -extensions v3_req \\\n    -extfile ${SSL_CONFIG}\n\necho -e "\\033[32m ====> 7. \u8bc1\u4e66\u5236\u4f5c\u5b8c\u6210 \\033[0m"\necho\necho -e "\\033[32m ====> 8. \u4ee5YAML\u683c\u5f0f\u8f93\u51fa\u7ed3\u679c \\033[0m"\necho "----------------------------------------------------------"\necho "ca_key: |"\ncat $CA_KEY | sed \'s/^/  /\'\necho\necho "ca_cert: |"\ncat $CA_CERT | sed \'s/^/  /\'\necho\necho "ssl_key: |"\ncat $SSL_KEY | sed \'s/^/  /\'\necho\necho "ssl_csr: |"\ncat $SSL_CSR | sed \'s/^/  /\'\necho\necho "ssl_cert: |"\ncat $SSL_CERT | sed \'s/^/  /\'\necho\n\necho -e "\\033[32m ====> 9. \u9644\u52a0CA\u8bc1\u4e66\u5230Cert\u6587\u4ef6 \\033[0m"\ncat ${CA_CERT} >> ${SSL_CERT}\necho "ssl_cert: |"\ncat $SSL_CERT | sed \'s/^/  /\'\necho\n\necho -e "\\033[32m ====> 10. \u91cd\u547d\u540d\u670d\u52a1\u8bc1\u4e66 \\033[0m"\necho "cp ${SSL_DOMAIN}.key tls.key"\ncp ${SSL_DOMAIN}.key tls.key\necho "cp ${SSL_DOMAIN}.crt tls.crt"\ncp ${SSL_DOMAIN}.crt tls.crt\n\n')),(0,s.kt)("p",null,"\u751f\u6210\u8bc1\u4e66\u548c\u79c1\u94a5\u6587\u4ef6\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"chmod +x certs-onekey.sh\n./certs-onekey.sh --ssl-domain=rancher.nblh.local --ssl-size=2048 --ssl-date=3650 --ssl-trusted-ip 172.19.82.157,127.0.0.1,192.168.0.104\n")),(0,s.kt)("p",null,"\u4e3arancher\u6dfb\u52a0\u81ea\u5efa\u7684\u8bc1\u4e66\u79c1\u94a5\u7b49\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl create namespace cattle-system\n# \u670d\u52a1\u8bc1\u4e66\u548c\u79c1\u94a5\u5bc6\u6587\nkubectl -n cattle-system create secret tls tls-rancher-ingress \\\n  --cert=tls.crt \\\n  --key=tls.key\n# ca\u8bc1\u4e66\u5bc6\u6587\nkubectl -n cattle-system create secret generic tls-ca \\\n  --from-file=cacerts.pem=./cacerts.pem\n")),(0,s.kt)("p",null,"\u4f7f\u7528helm chats\u5b89\u88c5rancher\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"# helm repo add rancher-latest https://releases.rancher.com/server-charts/latest\nhelm repo add rancher-stable https://releases.rancher.com/server-charts/stable\n\nhelm install rancher rancher-stable/rancher \\\n  --namespace cattle-system \\\n  --set privateCA=true \\\n  --set replicas=1 \\\n  --set hostname=rancher.nblh.local \\\n  --set bootstrapPassword=admin \\\n  --set ingress.tls.source=secret \\\n  --set global.cattle.psp.enabled=false\n")),(0,s.kt)("h2",{id:"metrics-server"},"metrics-server"),(0,s.kt)("p",null,"\u8d44\u6e90\u6307\u6807\u7ba1\u9053"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/resource-metrics-pipeline/"},"https://kubernetes.io/zh-cn/docs/tasks/debug/debug-cluster/resource-metrics-pipeline/")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/\nhelm install my-metrics-server metrics-server/metrics-server --version 3.10.0\n")),(0,s.kt)("p",null,"\u83b7\u53d6\u6307\u6807\u4fe1\u606f\uff1a"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-bash"}," NODE_NAME=<Name of node in your cluster>\n kubectl get --raw /api/v1/nodes/$NODE_NAME/proxy/metrics/resource\n")))}u.isMDXComponent=!0}}]);