"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[6365],{3905:(e,t,n)=>{n.d(t,{Zo:()=>k,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},k=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,k=o(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,d=u["".concat(s,".").concat(m)]||u[m]||c[m]||i;return n?a.createElement(d,l(l({ref:t},k),{},{components:n})):a.createElement(d,l({ref:t},k))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},37827:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},l="k3s & k3d Basic",o={unversionedId:"LinuxBasics/k3s - k3d Basic",id:"LinuxBasics/k3s - k3d Basic",title:"k3s & k3d Basic",description:"k3s",source:"@site/docs/LinuxBasics/k3s - k3d Basic.md",sourceDirName:"LinuxBasics",slug:"/LinuxBasics/k3s - k3d Basic",permalink:"/docs/LinuxBasics/k3s - k3d Basic",draft:!1,editUrl:"https://github.com/AGou-ops/myDocsv4/edit/main/docs/LinuxBasics/k3s - k3d Basic.md",tags:[],version:"current",frontMatter:{},sidebar:"linuxBasics",previous:{title:"Inotify \u6587\u4ef6\u76d1\u63a7",permalink:"/docs/LinuxBasics/inotifywait \u6587\u4ef6\u76d1\u63a7"},next:{title:"keepalived",permalink:"/docs/LinuxBasics/keepalived"}},s={},p=[{value:"k3s",id:"k3s",level:2},{value:"\u5b89\u88c5",id:"\u5b89\u88c5",level:3},{value:"k3d \u7b80\u4ecb",id:"k3d-\u7b80\u4ecb",level:2},{value:"\u5b89\u88c5",id:"\u5b89\u88c5-1",level:2},{value:"linux\u7cfb\u7edf\u4e0b",id:"linux\u7cfb\u7edf\u4e0b",level:3},{value:"Windows\u7cfb\u7edf\u4e0b",id:"windows\u7cfb\u7edf\u4e0b",level:3},{value:"\u96c6\u7fa4\u90e8\u7f72",id:"\u96c6\u7fa4\u90e8\u7f72",level:2},{value:"\u8f93\u51fakubeconfig\u4fe1\u606f",id:"\u8f93\u51fakubeconfig\u4fe1\u606f",level:2},{value:"\u66b4\u9732\u670d\u52a1",id:"\u66b4\u9732\u670d\u52a1",level:2},{value:"\u53c2\u8003\u94fe\u63a5",id:"\u53c2\u8003\u94fe\u63a5",level:2}],k={toc:p};function c(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"k3s--k3d-basic"},"k3s & k3d Basic"),(0,r.kt)("h2",{id:"k3s"},"k3s"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Lightweight Kubernetes")),(0,r.kt)("p",null,"\u5b98\u65b9\u7ad9\u70b9\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://k3s.io"},"https://k3s.io")),(0,r.kt)("p",null,"\u5b98\u65b9\u4ed3\u5e93\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/k3s"},"https://github.com/rancher/k3s")),(0,r.kt)("h3",{id:"\u5b89\u88c5"},"\u5b89\u88c5"),(0,r.kt)("p",null,"\u5c06",(0,r.kt)("inlineCode",{parentName:"p"},"k3s"),"\u5b89\u88c5\u6210\u4e3a\u670d\u52a1\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -sfL https://get.k3s.io | sh -\n# \u6dfb\u52a0worker\u8282\u70b9\ncurl -sfL https://get.k3s.io | K3S_URL=https://k3s-server:6443 K3S_TOKEN=`ssh k3s-server  cat /var/lib/rancher/k3s/server/node-token` sh -\n")),(0,r.kt)("p",null,"A kubeconfig file is written to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/rancher/k3s/k3s.yaml"),"."),(0,r.kt)("p",null,"\u624b\u52a8\u5b89\u88c5\u4f7f\u7528",(0,r.kt)("inlineCode",{parentName:"p"},"k3s"),"\uff1a"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Download ",(0,r.kt)("inlineCode",{parentName:"li"},"k3s")," from latest ",(0,r.kt)("a",{parentName:"li",href:"https://github.com/rancher/k3s/releases/latest"},"release"),", x86_64, armhf, and arm64 are supported."),(0,r.kt)("li",{parentName:"ol"},"Run server.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sudo k3s server &\n# Kubeconfig is written to /etc/rancher/k3s/k3s.yaml\nsudo k3s kubectl get nodes\n\n# On a different node run the below. NODE_TOKEN comes from\n# /var/lib/rancher/k3s/server/node-token on your server\nsudo k3s agent --server https://myserver:6443 --token ${NODE_TOKEN}\n")),(0,r.kt)("h2",{id:"k3d-\u7b80\u4ecb"},"k3d \u7b80\u4ecb"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"k3d is a lightweight wrapper to run k3s (Rancher Lab\u2019s minimal Kubernetes distribution) in docker.\nk3d makes it very easy to create single- and multi-node k3s clusters in docker, e.g. for local development on Kubernetes.")),(0,r.kt)("p",null,"\u5b98\u65b9\u7ad9\u70b9: ",(0,r.kt)("a",{parentName:"p",href:"https://k3d.io"},"https://k3d.io")),(0,r.kt)("h2",{id:"\u5b89\u88c5-1"},"\u5b89\u88c5"),(0,r.kt)("h3",{id:"linux\u7cfb\u7edf\u4e0b"},"linux\u7cfb\u7edf\u4e0b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# use the install script to grab the latest release:\nwget: wget -q -O - https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\n# \u6216\u8005\ncurl: curl -s https://raw.githubusercontent.com/rancher/k3d/main/install.sh | bash\n\n")),(0,r.kt)("h3",{id:"windows\u7cfb\u7edf\u4e0b"},"Windows\u7cfb\u7edf\u4e0b"),(0,r.kt)("p",null,"\u4ece",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/k3d/releases/tag/v3.1.3"},"\u5b98\u65b9\u4ed3\u5e93"),"\u4e2d\u4e0b\u8f7d\u5bf9\u5e94\u7684\u5305, \u914d\u7f6e\u597d\u73af\u5883\u53d8\u91cf\u5373\u53ef."),(0,r.kt)("h2",{id:"\u96c6\u7fa4\u90e8\u7f72"},"\u96c6\u7fa4\u90e8\u7f72"),(0,r.kt)("p",null,"\u5355\u8282\u70b9\u90e8\u7f72:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"k3d cluster create mycluster\n")),(0,r.kt)("p",null,"\u591a\u8282\u70b9\u90e8\u7f72:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'k3d cluster create multiserver --servers 3\n# \u5411\u5df2\u5b58\u5728\u7684\u96c6\u7fa4\u4e2d\u6dfb\u52a0\u8282\u70b9\nk3d node create newserver --cluster multiserver --role server\n# \u90e8\u7f72\u4e24\u4e2aagent\u8282\u70b9\nk3d cluster create --api-port 6550 -p "8081:80@loadbalancer" --agents 2\n')),(0,r.kt)("h2",{id:"\u8f93\u51fakubeconfig\u4fe1\u606f"},"\u8f93\u51fakubeconfig\u4fe1\u606f"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"k3d kubeconfig write k3s-default\n")),(0,r.kt)("h2",{id:"\u66b4\u9732\u670d\u52a1"},"\u66b4\u9732\u670d\u52a1"),(0,r.kt)("blockquote",null,(0,r.kt)("h2",{parentName:"blockquote",id:"1-via-ingress"},"1. via Ingress"),(0,r.kt)("p",{parentName:"blockquote"},"In this example, we will deploy a simple nginx webserver deployment and make it accessible via ingress. Therefore, we have to create the cluster in a way, that the internal port 80 (where the ",(0,r.kt)("inlineCode",{parentName:"p"},"traefik")," ingress controller is listening on) is exposed on the host system."),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a cluster, mapping the ingress port 80 to localhost:8081"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'k3d cluster create --api-port 6550 -p "8081:80@loadbalancer" --agents 2')),(0,r.kt)("p",{parentName:"li"},"Good to know"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--api-port 6550")," is not required for the example to work. It\u2019s used to have ",(0,r.kt)("inlineCode",{parentName:"li"},"k3s"),"\u2018s API-Server listening on port 6550 with that port mapped to the host system."),(0,r.kt)("li",{parentName:"ul"},"the port-mapping construct",(0,r.kt)("inlineCode",{parentName:"li"},"8081:80@loadbalancer"),"means",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"map port ",(0,r.kt)("inlineCode",{parentName:"li"},"8081")," from the host to port ",(0,r.kt)("inlineCode",{parentName:"li"},"80")," on the container which matches the nodefilter ",(0,r.kt)("inlineCode",{parentName:"li"},"loadbalancer")))),(0,r.kt)("li",{parentName:"ul"},"the",(0,r.kt)("inlineCode",{parentName:"li"},"loadbalancer"),"nodefilter matches only the",(0,r.kt)("inlineCode",{parentName:"li"},"serverlb")," that\u2019s deployed in front of a cluster\u2019s server nodes",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"all ports exposed on the ",(0,r.kt)("inlineCode",{parentName:"li"},"serverlb")," will be proxied to the same ports on all server nodes in the cluster"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get the kubeconfig file"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'export KUBECONFIG="$(k3d kubeconfig write k3s-default)"'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a nginx deployment"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kubectl create deployment nginx --image=nginx"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a ClusterIP service for it"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"kubectl create service clusterip nginx --tcp=80:80"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create an ingress object for it with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl apply -f")," ",(0,r.kt)("em",{parentName:"p"},"Note"),": ",(0,r.kt)("inlineCode",{parentName:"p"},"k3s")," deploys ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/containous/traefik"},(0,r.kt)("inlineCode",{parentName:"a"},"traefik"))," as the default ingress controller"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},'apiVersion: extensions/v1beta1\nkind: Ingress\nmetadata:\n  name: nginx\n  annotations:\n    ingress.kubernetes.io/ssl-redirect: "false"\nspec:\n  rules:\n  - http:\n      paths:\n      - path: /\n        backend:\n          serviceName: nginx\n          servicePort: 80\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Curl it via localhost"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"curl localhost:8081/")))),(0,r.kt)("h2",{parentName:"blockquote",id:"2-via-nodeport"},"2. via NodePort"),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a cluster, mapping the port 30080 from agent-0 to localhost:8082"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},'k3d cluster create mycluster -p "8082:30080@agent[0]" --agents 2')),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Note"),": Kubernetes\u2019 default NodePort range is ",(0,r.kt)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/services-networking/service/#nodeport"},(0,r.kt)("inlineCode",{parentName:"a"},"30000-32767"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Note"),": You may as well expose the whole NodePort range from the very beginning, e.g. via ",(0,r.kt)("inlineCode",{parentName:"li"},'k3d cluster create mycluster --agents 3 -p "30000-32767:30000-32767@server[0]"')," (See ",(0,r.kt)("a",{parentName:"li",href:"https://www.youtube.com/watch?v=5HaU6338lAk"},"this video from @portainer"),")")))),(0,r.kt)("p",{parentName:"blockquote"},"\u2026 (Steps 2 and 3 like above) \u2026"),(0,r.kt)("ol",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a NodePort service for it with ",(0,r.kt)("inlineCode",{parentName:"p"},"kubectl apply -f")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"apiVersion: v1\nkind: Service\nmetadata:\n  labels:\n    app: nginx\n  name: nginx\nspec:\n  ports:\n  - name: 80-80\n    nodePort: 30080\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  type: NodePort\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Curl it via localhost"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"curl localhost:8082/"))))),(0,r.kt)("h2",{id:"\u53c2\u8003\u94fe\u63a5"},"\u53c2\u8003\u94fe\u63a5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"k3d\u5b98\u65b9github\u4ed3\u5e93: ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/rancher/k3d"},"https://github.com/rancher/k3d"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"k3d Documentation: ",(0,r.kt)("a",{parentName:"p",href:"https://k3d.io/"},"https://k3d.io/")))))}c.isMDXComponent=!0}}]);