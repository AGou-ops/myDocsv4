"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[2899],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>d});var t=r(67294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function s(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),l=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=l(r),d=a,_=m["".concat(c,".").concat(d)]||m[d]||u[d]||o;return r?t.createElement(_,i(i({ref:n},p),{},{components:r})):t.createElement(_,i({ref:n},p))}));function d(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=m;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var l=2;l<o;l++)i[l]=r[l];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}m.displayName="MDXCreateElement"},33822:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var t=r(87462),a=(r(67294),r(3905));const o={},i="Terraform \u793a\u4f8b",s={unversionedId:"LinuxBasics/Terraform/Terraform Examples",id:"LinuxBasics/Terraform/Terraform Examples",title:"Terraform \u793a\u4f8b",description:"\u521b\u5efa\u81ea\u5b9a\u4e49vpc\u3001gw\u3001subnet\u3001networkr\u3001eip\u548cinstance",source:"@site/docs/LinuxBasics/Terraform/Terraform Examples.md",sourceDirName:"LinuxBasics/Terraform",slug:"/LinuxBasics/Terraform/Terraform Examples",permalink:"/docs/LinuxBasics/Terraform/Terraform Examples",draft:!1,editUrl:"https://github.com/AGou-ops/myDocsv4/edit/main/docs/LinuxBasics/Terraform/Terraform Examples.md",tags:[],version:"current",frontMatter:{},sidebar:"linuxBasics",previous:{title:"Terraform Basic",permalink:"/docs/LinuxBasics/Terraform/Terraform Basic"},next:{title:"Terraform \u53d8\u91cf",permalink:"/docs/LinuxBasics/Terraform/Terraform Variable"}},c={},l=[{value:"\u521b\u5efa\u81ea\u5b9a\u4e49vpc\u3001gw\u3001subnet\u3001networkr\u3001eip\u548cinstance",id:"\u521b\u5efa\u81ea\u5b9a\u4e49vpcgwsubnetnetworkreip\u548cinstance",level:2},{value:"\u521b\u5efa\u81ea\u5b9a\u4e49role\u5e76\u9644\u52a0\u89c4\u5219\u3001\u7ed1\u5b9a\u5230instance",id:"\u521b\u5efa\u81ea\u5b9a\u4e49role\u5e76\u9644\u52a0\u89c4\u5219\u7ed1\u5b9a\u5230instance",level:2},{value:"\u53c2\u8003\u8d44\u6599",id:"\u53c2\u8003\u8d44\u6599",level:2}],p={toc:l};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"terraform-\u793a\u4f8b"},"Terraform \u793a\u4f8b"),(0,a.kt)("h2",{id:"\u521b\u5efa\u81ea\u5b9a\u4e49vpcgwsubnetnetworkreip\u548cinstance"},"\u521b\u5efa\u81ea\u5b9a\u4e49vpc\u3001gw\u3001subnet\u3001networkr\u3001eip\u548cinstance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'terraform {\n  required_providers {\n    aws = {\n      source  = "hashicorp/aws"\n      version = "~> 2.70"\n    }\n  }\n}\n\nprovider "aws" {\n  profile = "default"\n  region  = "us-east-2"\n}\n\n\n\n# 1. Create vpc\n\nresource "aws_vpc" "prod-vpc" {\n  cidr_block = "10.0.0.0/16"\n  tags = {\n    Name = "production"\n  }\n}\n\n# 2. Create Internet Gateway\n\nresource "aws_internet_gateway" "gw" {\n  vpc_id = aws_vpc.prod-vpc.id\n\n\n}\n# 3. Create Custom Route Table\n\nresource "aws_route_table" "prod-route-table" {\n  vpc_id = aws_vpc.prod-vpc.id\n\n  route {\n    cidr_block = "0.0.0.0/0"\n    gateway_id = aws_internet_gateway.gw.id\n  }\n\n  route {\n    ipv6_cidr_block = "::/0"\n    gateway_id      = aws_internet_gateway.gw.id\n  }\n\n  tags = {\n    Name = "Prod"\n  }\n}\n\n# 4. Create a Subnet \n\nresource "aws_subnet" "subnet-1" {\n  vpc_id            = aws_vpc.prod-vpc.id\n  cidr_block        = "10.0.1.0/24"\n  availability_zone = "us-east-2a"\n\n  tags = {\n    Name = "prod-subnet"\n  }\n}\n\n# 5. Associate subnet with Route Table\n\nresource "aws_route_table_association" "a" {\n  subnet_id      = aws_subnet.subnet-1.id\n  route_table_id = aws_route_table.prod-route-table.id\n}\n# 6. Create Security Group to allow port 22,80,443\n\nresource "aws_security_group" "allow_web" {\n  name        = "allow_web_traffic"\n  description = "Allow Web inbound traffic"\n  vpc_id      = aws_vpc.prod-vpc.id\n\n  ingress {\n    description = "HTTPS"\n    from_port   = 443\n    to_port     = 443\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n  ingress {\n    description = "HTTP"\n    from_port   = 80\n    to_port     = 80\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n  ingress {\n    description = "SSH"\n    from_port   = 22\n    to_port     = 22\n    protocol    = "tcp"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  egress {\n    from_port   = 0\n    to_port     = 0\n    protocol    = "-1"\n    cidr_blocks = ["0.0.0.0/0"]\n  }\n\n  tags = {\n    Name = "allow_web"\n  }\n}\n\n# 7. Create a network interface with an ip in the subnet that was created in step 4\n\nresource "aws_network_interface" "web-server-nic" {\n  subnet_id       = aws_subnet.subnet-1.id\n  private_ips     = ["10.0.1.11"]\n  security_groups = [aws_security_group.allow_web.id]\n\n}\n# 8. Assign an elastic IP to the network interface created in step 7\n\nresource "aws_eip" "one" {\n  vpc                       = true\n  network_interface         = aws_network_interface.web-server-nic.id\n  associate_with_private_ip = "10.0.1.11"\n  depends_on                = [aws_internet_gateway.gw]\n}\n\noutput "server_public_ip" {\n  value = aws_eip.one.public_ip\n}\n\n# 9. Create Ubuntu server and install/enable apache2\n\nresource "aws_instance" "web-server-instance" {\n  ami               = "ami-07efac79022b86107"\n  instance_type     = "t2.micro"\n  availability_zone = "us-east-2a"\n  key_name          = "test-key"\n\n  network_interface {\n    device_index         = 0\n    network_interface_id = aws_network_interface.web-server-nic.id\n  }\n\n  user_data = <<-EOF\n                #!/bin/bash\n                sudo apt update -y\n                sudo apt install apache2 -y\n                sudo systemctl start apache2\n                sudo bash -c \'echo "<h1>my first server created by Terraform.</h1>" > /var/www/html/index.html\'\n                EOF\n  tags = {\n    Name = "web-server"\n  }\n}\n\noutput "server_private_ip" {\n  value = aws_instance.web-server-instance.private_ip\n\n}\n\noutput "server_id" {\n  value = aws_instance.web-server-instance.id\n}\n\n')),(0,a.kt)("h2",{id:"\u521b\u5efa\u81ea\u5b9a\u4e49role\u5e76\u9644\u52a0\u89c4\u5219\u7ed1\u5b9a\u5230instance"},"\u521b\u5efa\u81ea\u5b9a\u4e49role\u5e76\u9644\u52a0\u89c4\u5219\u3001\u7ed1\u5b9a\u5230instance"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'resource "aws_iam_role" "example" {\n  name = "example"\n\n  # assume_role_policy is omitted for brevity in this example. See the\n  # documentation for aws_iam_role for a complete example.\n  assume_role_policy = "..."\n}\n\nresource "aws_iam_instance_profile" "example" {\n  # Because this expression refers to the role, Terraform can infer\n  # automatically that the role must be created first.\n  role = aws_iam_role.example.name\n}\n\nresource "aws_iam_role_policy" "example" {\n  name   = "example"\n  role   = aws_iam_role.example.name\n  policy = jsonencode({\n    "Statement" = [{\n      # This policy allows software running on the EC2 instance to\n      # access the S3 API.\n      "Action" = "s3:*",\n      "Effect" = "Allow",\n    }],\n  })\n}\n\nresource "aws_instance" "example" {\n  ami           = "ami-a1b2c3d4"\n  instance_type = "t2.micro"\n\n  # Terraform can infer from this that the instance profile must\n  # be created before the EC2 instance.\n  iam_instance_profile = aws_iam_instance_profile.example\n\n  # However, if software running in this EC2 instance needs access\n  # to the S3 API in order to boot properly, there is also a "hidden"\n  # dependency on the aws_iam_role_policy that Terraform cannot\n  # automatically infer, so it must be declared explicitly:\n  depends_on = [\n    aws_iam_role_policy.example,\n  ]\n}\n')),(0,a.kt)("h2",{id:"\u53c2\u8003\u8d44\u6599"},"\u53c2\u8003\u8d44\u6599"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/terraform-aws-modules"},"https://github.com/terraform-aws-modules"))))}u.isMDXComponent=!0}}]);