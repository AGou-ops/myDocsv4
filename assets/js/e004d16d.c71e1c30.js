"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[9329],{3905:(e,n,a)=>{a.d(n,{Zo:()=>u,kt:()=>d});var t=a(67294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function s(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?s(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function i(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},s=Object.keys(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)a=s[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=t.createContext({}),o=function(e){var n=t.useContext(c),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},u=function(e){var n=o(e.components);return t.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=o(a),d=r,g=m["".concat(c,".").concat(d)]||m[d]||p[d]||s;return a?t.createElement(g,l(l({ref:n},u),{},{components:a})):t.createElement(g,l({ref:n},u))}));function d(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var o=2;o<s;o++)l[o]=a[o];return t.createElement.apply(null,l)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},16518:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>o});var t=a(87462),r=(a(67294),a(3905));const s={},l=void 0,i={unversionedId:"CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66",id:"CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66",title:"cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66",description:"cert-manager\u7b80\u4ecb",source:"@site/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66.md",sourceDirName:"CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b",slug:"/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66",permalink:"/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66",draft:!1,editUrl:"https://github.com/AGou-ops/myDocsv4/edit/main/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/cert-manager\u81ea\u52a8\u9881\u53d1\u8bc1\u4e66.md",tags:[],version:"current",frontMatter:{},sidebar:"cloudNative",previous:{title:"SpringCloud\u5fae\u670d\u52a1\u7535\u5546\u7cfb\u7edf\u5728Kubernetes\u96c6\u7fa4\u4e2d\u4e0a\u7ebf\u8be6\u7ec6\u6559\u7a0b",permalink:"/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/SpringCloud\u5fae\u670d\u52a1\u7535\u5546\u7cfb\u7edf\u5728Kubernetes\u96c6\u7fa4\u4e2d\u4e0a\u7ebf\u8be6\u7ec6\u6559\u7a0b"},next:{title:"helm\u5b89\u88c5zookeeper\u96c6\u7fa4",permalink:"/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/helm\u5b89\u88c5zookeeper\u96c6\u7fa4"}},c={},o=[{value:"cert-manager\u7b80\u4ecb",id:"cert-manager\u7b80\u4ecb",level:2},{value:"k8s\u96c6\u7fa4\u4e2d\u5b89\u88c5cert-manager",id:"k8s\u96c6\u7fa4\u4e2d\u5b89\u88c5cert-manager",level:2},{value:"\u4e3anginx-ingress\u81ea\u52a8\u7b7e\u53d1\u8bc1\u4e66",id:"\u4e3anginx-ingress\u81ea\u52a8\u7b7e\u53d1\u8bc1\u4e66",level:2},{value:"\u4f7f\u7528CA",id:"\u4f7f\u7528ca",level:3},{value:"\u76f4\u63a5\u7b7e\u53d1",id:"\u76f4\u63a5\u7b7e\u53d1",level:2},{value:"\u624b\u52a8\u66f4\u65b0\u8bc1\u4e66",id:"\u624b\u52a8\u66f4\u65b0\u8bc1\u4e66",level:2},{value:"\u53c2\u8003\u94fe\u63a5",id:"\u53c2\u8003\u94fe\u63a5",level:2}],u={toc:o};function p(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},u,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"cert-manager\u7b80\u4ecb"},"cert-manager\u7b80\u4ecb"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"cert-manager \u662f\u4e00\u4e2a\u4e91\u539f\u751f\u8bc1\u4e66\u7ba1\u7406\u5f00\u6e90\u9879\u76ee\uff0c\u7528\u4e8e\u5728 Kubernetes \u96c6\u7fa4\u4e2d\u81ea\u52a8\u7ba1\u7406\u548c\u9881\u53d1\u6765\u81ea\u5404\u79cd\u9881\u53d1\u6e90\u7684 TLS \u8bc1\u4e66\uff0c\u5b83\u53ef\u4ee5\u4ece\u5404\u79cd\u53d7\u652f\u6301\u7684\u6765\u6e90\u9881\u53d1\u8bc1\u4e66\uff0c\u5305\u62ec ",(0,r.kt)("a",{parentName:"p",href:"https://letsencrypt.org/"},"Let\u2019s Encrypt"),"\u3001",(0,r.kt)("a",{parentName:"p",href:"https://www.vaultproject.io/"},"HashiCorp Vault"),"\u548c",(0,r.kt)("a",{parentName:"p",href:"https://www.venafi.com/"},"Venafi"),"\u4ee5\u53ca\u79c1\u6709 PKI\uff0c\u5b83\u5c06\u786e\u4fdd\u8bc1\u4e66\u5b9a\u671f\u6709\u6548\u548c\u66f4\u65b0\uff0c\u5e76\u5728\u5230\u671f\u524d\u7684\u9002\u5f53\u65f6\u95f4\u5c1d\u8bd5\u66f4\u65b0\u8bc1\u4e66\u3002")),(0,r.kt)("h2",{id:"k8s\u96c6\u7fa4\u4e2d\u5b89\u88c5cert-manager"},"k8s\u96c6\u7fa4\u4e2d\u5b89\u88c5cert-manager"),(0,r.kt)("p",null,"\u53c2\u8003\uff1a",(0,r.kt)("a",{parentName:"p",href:"https://cert-manager.io/docs/installation/"},"Installation - cert-manager Documentation")),(0,r.kt)("p",null,"\u63a8\u8350\u4f7f\u7528helm chart\u8fdb\u884c\u5b89\u88c5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add jetstack https://charts.jetstack.io\nhelm repo update\nkubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.0/cert-manager.crds.yaml\nhelm install \\\n  cert-manager jetstack/cert-manager \\\n  --namespace cert-manager \\\n  --create-namespace \\\n  --version v1.13.0 \\\n  # --set installCRDs=true\n")),(0,r.kt)("h2",{id:"\u4e3anginx-ingress\u81ea\u52a8\u7b7e\u53d1\u8bc1\u4e66"},"\u4e3anginx-ingress\u81ea\u52a8\u7b7e\u53d1\u8bc1\u4e66"),(0,r.kt)("h3",{id:"\u4f7f\u7528ca"},"\u4f7f\u7528CA"),(0,r.kt)("p",null,"\u8fd9\u91cc\u4f7f\u7528\u4e00\u4e2a\u5b98\u65b9\u7684\u793a\u4f8b\uff0c\u4f46\u7565\u6709\u4e0d\u540c\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"selfsigned-cert.yaml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: selfsigned-cluster-issuer\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-ca\n  namespace: cert-manager\nspec:\n  isCA: true\n  commonName: ca.nblh.local\n  subject:\n    countries:\n      - CN\n    localities:\n      - HangZhou\n    organizationalUnits:\n      - Root CA\n    organizations:\n      - nblh.local\n    postalCodes:\n      - "310000"\n    provinces:\n      - ZheJiang\n    streetAddresses:\n      - fandou graden\n    serialNumber: SELF20230919\n  duration: 43800h\n  secretName: selfsigned-ca-secret\n  privateKey:\n    algorithm: ECDSA\n    size: 256\n  issuerRef:\n    name: selfsigned-cluster-issuer\n    kind: ClusterIssuer\n    group: cert-manager.io\n\n---\napiVersion: cert-manager.io/v1\nkind: ClusterIssuer\nmetadata:\n  name: cluster-ca-issuer\nspec:\n  ca:\n    secretName: selfsigned-ca-secret\n---\n# \u624b\u52a8\u7b7e\u53d1\u8bc1\u4e66\n# apiVersion: cert-manager.io/v1\n# kind: Certificate\n# metadata:\n#   name: kuard-tls\n#   namespace: test\n# spec:\n#   dnsNames:\n#     - kuard.nblh.local\n#     - w1.nblh.local\n#   issuerRef:\n#     group: cert-manager.io\n#     kind: ClusterIssuer\n#     name: selfsigned-cluster-issuer\n#   secretName: kuard-tls\n#   duration: 87600h\n#   usages:\n#   - digital signature\n#   - key encipherment\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kuard-deploy.yaml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: v1\nkind: Service\nmetadata:\n  name: kuard\n  namespace: test\nspec:\n  ports:\n  - port: 80\n    targetPort: 8080\n    protocol: TCP\n  selector:\n    app: kuard\n---\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: kuard\n  namespace: test\nspec:\n  selector:\n    matchLabels:\n      app: kuard\n  replicas: 1\n  template:\n    metadata:\n      labels:\n        app: kuard\n    spec:\n      containers:\n      - image: gcr.io/kuar-demo/kuard-amd64:blue\n        imagePullPolicy: IfNotPresent\n        name: kuard\n        ports:\n        - containerPort: 8080\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kuard-ingress.yaml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: kuard\n  annotations:\n    cert-manager.io/cluster-issuer: "cluster-ca-issuer"\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - kuard.nblh.local\n    - w1.nblh.local\n    secretName: kuard-tls\n  rules:\n  - host: kuard.nblh.local\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: kuard\n            port:\n              number: 80\n')),(0,r.kt)("p",null,"\u5e94\u7528\u6e05\u5355\u6587\u4ef6\u521b\u5efa\u8bc1\u4e66\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f kuard-deploy.yaml -f selfsigned-cert.yaml -f kuard-ingress.yaml\n# \u521b\u5efa\u5b8c\u6210\u4e4b\u540e\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u67e5\u770b\u8bc1\u4e66\u9881\u53d1\u72b6\u6001\uff0cREADY\u4e3aTrue\u5219\u8868\u793a\u5df2\u9881\u53d1\nkubectl get certificate -A\nNAMESPACE      NAME            READY   SECRET                 AGE\ncert-manager   selfsigned-ca   True    selfsigned-ca-secret   9s\ntest           kuard-tls       True    kuard-tls              3s\n")),(0,r.kt)("p",null,"\u5bfc\u51fa\u8bc1\u4e66\u6587\u4ef6\u5b89\u88c5\u5230\u64cd\u4f5c\u7cfb\u7edf\u6216\u8005\u6d4f\u89c8\u5668\u5f53\u4e2d\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl get secrets kuard-tls -ojsonpath='{.data.tls\\.crt}'  | base64 -d > tls.crt\n")),(0,r.kt)("p",null,"MacOS\u94a5\u5319\u4e32\u4e2d\u9009\u62e9\u59cb\u7ec8\u4fe1\u4efb\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://cdn.agou-ops.cn/others/image-20230919150606112.png",alt:"image-20230919150606112"})),(0,r.kt)("p",null,"\u6253\u5f00\u6d4f\u89c8\u5668\u76f4\u63a5\u8bbf\u95ee\uff0c\u53ef\u4ee5\u770b\u5230\u81ea\u7b7e\u8bc1\u4e66\u5df2\u7ecf\u53ef\u4ee5\u6b63\u5e38\u4f7f\u7528\uff1a"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://cdn.agou-ops.cn/others/image-20230919150747892.png",alt:"image-20230919150747892"})),(0,r.kt)("h2",{id:"\u76f4\u63a5\u7b7e\u53d1"},"\u76f4\u63a5\u7b7e\u53d1"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"selfsigned-cert.yaml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: cert-manager.io/v1\nkind: Issuer\nmetadata:\n  name: selfsigned-issuer\n  namespace: test\nspec:\n  selfSigned: {}\n---\napiVersion: cert-manager.io/v1\nkind: Certificate\nmetadata:\n  name: selfsigned-cert\nspec:\n  dnsNames:\n  - kuard.nblh.local\n  secretName: selfsigned-cert-tls\n  issuerRef:\n    name: selfsigned-issuer\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"kuard-ingress.yaml"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: networking.k8s.io/v1\nkind: Ingress\nmetadata:\n  name: kuard\n  annotations:\n    cert-manager.io/issuer: "selfsigned-issuer"   # \u4e0e\u4e0a\u9762\u7684issuer\u5bf9\u5e94\nspec:\n  ingressClassName: nginx\n  tls:\n  - hosts:\n    - kuard.nblh.local\n    - w1.nblh.local\n    secretName: selfsigned-cert-tls            # \u4e0e\u4e0a\u9762\u7684secret\u5bf9\u5e94\n  rules:\n  - host: kuard.nblh.local\n    http:\n      paths:\n      - path: /\n        pathType: Prefix\n        backend:\n          service:\n            name: kuard\n            port:\n              number: 80\n')),(0,r.kt)("p",null,"\u6b65\u9aa4\u548c\u4e0a\u9762\u7c7b\u4f3c\uff0c\u5c31\u4e0d\u5728\u6b64\u8d58\u8ff0\u3002"),(0,r.kt)("h2",{id:"\u624b\u52a8\u66f4\u65b0\u8bc1\u4e66"},"\u624b\u52a8\u66f4\u65b0\u8bc1\u4e66"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl edit certificate kuard-tls -n test\n# \u5728spec\u5b57\u6bb5\u4e0b\u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c\n  duration: 87600h # 10 years\n  renewBefore: 720h # 30 days\n# \u4fdd\u5b58\u5e76\u9000\u51fa\n\n# \u5220\u9664\u539f\u6765\u7684secret\uff0c\u8ba9certmanager\u91cd\u65b0\u81ea\u52a8\u751f\u6210secret\nkubectl get certificate kuard-tls -o=jsonpath='{.spec.secretName}' | xargs kubectl delete secret\n")),(0,r.kt)("h2",{id:"\u53c2\u8003\u94fe\u63a5"},"\u53c2\u8003\u94fe\u63a5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cert-manager.io/docs/configuration/selfsigned/"},"SelfSigned - cert-manager Documentation"))))}p.isMDXComponent=!0}}]);