"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[300],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),f=c(n),h=i,_=f["".concat(s,".").concat(h)]||f[h]||d[h]||a;return n?r.createElement(_,o(o({ref:t},p),{},{components:n})):r.createElement(_,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<a;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},86241:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(87462),i=(n(67294),n(3905));const a={},o="\u6839\u636ecsv\u91cd\u5f52\u6863\u6587\u4ef6",l={unversionedId:"Scripts/shell/resort-file-from-csv/resort-file",id:"Scripts/shell/resort-file-from-csv/resort-file",title:"\u6839\u636ecsv\u91cd\u5f52\u6863\u6587\u4ef6",description:"\u9700\u6c42\uff1a\u6839\u636eexcel\u4e2d\u7684\u6587\u4ef6\u5217\u8868\uff0c\u5c06excel\u8fdb\u884c\u7b80\u5355\u5904\u7406\u6210csv\u683c\u5f0f\uff0c\u4f7f\u7528sed\u3001awk\u7b49\u7ed3\u5408\u6b63\u5219\u5bf9\u56fe\u7247\u6587\u4ef6\u6309\u7167\u5e74\u6708\u7684\u683c\u5f0f\u6765\u8fdb\u884c\u91cd\u65b0\u5f52\u6863\u5e76\u8f93\u51fa\u76f8\u5173\u65e5\u5fd7\u3002",source:"@site/docs/Scripts/shell/resort-file-from-csv/resort-file.md",sourceDirName:"Scripts/shell/resort-file-from-csv",slug:"/Scripts/shell/resort-file-from-csv/resort-file",permalink:"/docs/Scripts/shell/resort-file-from-csv/resort-file",draft:!1,editUrl:"https://github.com/AGou-ops/myDocsv4/edit/main/docs/Scripts/shell/resort-file-from-csv/resort-file.md",tags:[],version:"current",frontMatter:{},sidebar:"scripts",previous:{title:"resort-file-from-csv",permalink:"/docs/category/resort-file-from-csv"},next:{title:"CentOS \u7cfb\u7edf\u4fe1\u606f\u7edf\u8ba1",permalink:"/docs/Scripts/shell/CentOS sys information"}},s={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"\u6839\u636ecsv\u91cd\u5f52\u6863\u6587\u4ef6"},"\u6839\u636ecsv\u91cd\u5f52\u6863\u6587\u4ef6"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"\u9700\u6c42\uff1a\u6839\u636eexcel\u4e2d\u7684\u6587\u4ef6\u5217\u8868\uff0c\u5c06excel\u8fdb\u884c\u7b80\u5355\u5904\u7406\u6210csv\u683c\u5f0f\uff0c\u4f7f\u7528sed\u3001awk\u7b49\u7ed3\u5408\u6b63\u5219\u5bf9\u56fe\u7247\u6587\u4ef6\u6309\u7167\u5e74\u6708\u7684\u683c\u5f0f\u6765\u8fdb\u884c\u91cd\u65b0\u5f52\u6863\u5e76\u8f93\u51fa\u76f8\u5173\u65e5\u5fd7\u3002")),(0,i.kt)("p",null,"\u4ee3\u7801\u5982\u4e0b\uff1a"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'#!/bin/bash\n#\n#**************************************************\n# Author:         AGou-ops                        *\n# E-mail:         agou-ops@foxmail.com            *\n# Date:           2021-08-10                      *\n# Description:    Re-sort picture file              *\n# Copyright 2021 by AGou-ops.All Rights Reserved  *\n#**************************************************\nset -euo pipefail\nset -o errexit\n# -------\nbase_dir=./gif\npath_pic=./path_pics.csv\n\n\n# Create destination Dirs\ncreate_dirs(){\n   # dirs_name=`tree -dfi "${base_dir}" | grep -v "dire*" | sed "s/gif/output/g" `\n   # mkdir -pv $dirs_name && echo -e \\n\\n"success" || echo "\\n\\nfailed"\n   dirs_name=`awk -F, \'{print "./"$1}\' "${path_pic}" | sed "s@./ @./output/@g"  | uniq`\n   mkdir -pv $dirs_name && echo -e "\\033[42;37m CREATE DIRs SUCCESS \\033[0m\\n\\n" || echo -e "\\033[41;37m FAILED \\033[0m"\n}\ncreate_dirs\n# Sleep 2 seconds to wait create_dirs\nsleep 1\necho -e "\\n\\n\\033[47;30m ============================== TASK START ============================== \\033[0m\\n"\n\n# Get old filepath and new filepath\ntree -if "${base_dir}" | egrep \'*.gif$|*.png\' | tr "." "_" | tr " " "<" | tr "-" ">" > ./old_filepath.txt\nawk -F, \'{print "./"$1"/"$2}\' "${path_pic}" | sed "s@./ @./output/@g" | tr "." "_" | tr " " "<" | tr "-" ">" > ./new_filepath.txt\n\n`dos2unix old_filepath.txt`\n`dos2unix new_filepath.txt`\n\nsleep 2\n# old_filepath=`tree -if "${base_dir}" | egrep \'*.gif$|*.png|*.jpg\'`\n# new_filepath=`awk -F, \'{print "./"$1"/"$2}\' "${path_pic}" | sed "s@./ @./output/@g"`\n\n# Create dict to store filename(key) and filepath(value)\ndeclare -A old_path_dict\nwhile read line; do \n  key=$(basename $line)\n  data=$(dirname $line)\n  old_path_dict[$key]=$data\ndone < old_filepath.txt\n\n\ndeclare -A new_path_dict\nwhile read line; do \n  key=$(basename $line)\n  data=$(dirname $line)\n  new_path_dict[$key]=$data\ndone < new_filepath.txt\n\n# Empty file content\n: > ./match_result.txt\n: > ./final_result.txt\n: > ./final_result2.txt\n: > ./final_result3.txt\n\n\nfor i in $(echo ${!new_path_dict[*]});do\n    # echo "$i : ${new_path_dict[$i]}"\n    for j in $(echo ${!old_path_dict[*]});do\n        if [ "$i" == "$j" ];then\n            echo -e "\u3010MATCHED\u3011 $i\\t==\\t$j \\t\\t\u3010${new_path_dict[$i]}\\t<==>\\t${old_path_dict[$j]}\u3011" >> ./match_result.txt\n# ---------------- IMPORTANT STEP --------------------\n            old_absolute_path=`echo -e "${old_path_dict[$j]}/$j" | tr "_" "." | tr "<" " "  | tr ">" "-"`\n            new_absolute_path=`echo -e "${new_path_dict[$j]}/$j" | tr "_" "." | tr "<" " "  | tr ">" "-"`\n            # test=`echo -e ${old_path_dict[$j]}/\\t$j | tr "_" "." | tr "<" " "  | tr ">" "-""`\n            test1=`echo -e "${old_path_dict[$j]}/\\t$j" | tr "_" "." | tr "<" " "  | tr ">" "-"`\n            test2=`echo -e "${new_path_dict[$j]}/\\t$j" | tr "_" "." | tr "<" " "  | tr ">" "-"`\n            dest_path=`echo -e "${new_path_dict[$j]}/" | tr "_" "." | tr "<" " "  | tr ">" "-"`\n            echo -e "$old_absolute_path\\t==>\\t$new_absolute_path" >> ./final_result.txt\n            echo $test1 >> ./final_result2.txt\n            echo $test2 >> ./final_result3.txt\n            mv --verbose "$old_absolute_path" "$dest_path"  && echo -e "\\033[42;37m SUCCESS \\033[0m" || echo -e "\\033[41;37m FAILED \\033[0m"\n        fi\n    done\ndone\n# test dict\n# echo "${new_path_dict["\u8fdb\u9879\u53d1\u7968_png"]}"\n# echo "${old_path_dict["\u8fdb\u9879\u53d1\u7968_png"]}"\n\n\n# old_filepath_2_dict=``\n# new_filepath_2_dict=``\n\n# for i in "$all_filepath";do\n#     # path1=`dirname "$i"`\n#     # filename1=`basename "$i"`\n#     # echo -e "$path1\\t---\\t$filename1"\n#     # break\n#     for j in "$new_filepath";do\n#         filename1=`basename "$i"`\n#         path2=`dirname "$j"`\n#         filename2=`basename "$j"`\n#         # echo -e "$path2\\t---\\t$filename2"\n#     done\n# done\n# get_filename=$(basename $all_filepath)\n\n\necho -e "\\n\\n\\033[47;30m ============================== TASK END ============================== \\033[0m\\n"\n\n# Clean useless files\n`rm ./new_filepath.txt ./old_filepath.txt`\n')))}d.isMDXComponent=!0}}]);