"use strict";(self.webpackChunkmy_docsv_4=self.webpackChunkmy_docsv_4||[]).push([[5424],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>d});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=c(t),d=r,k=m["".concat(o,".").concat(d)]||m[d]||p[d]||l;return t?a.createElement(k,i(i({ref:n},u),{},{components:t})):a.createElement(k,i({ref:n},u))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=m;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<l;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},47584:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=t(87462),r=(t(67294),t(3905));const l={},i=void 0,s={unversionedId:"CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/jenkins\u7ed3\u5408",id:"CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/jenkins\u7ed3\u5408",title:"jenkins\u7ed3\u5408",description:"\u63d2\u4ef6",source:"@site/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/jenkins\u7ed3\u5408.md",sourceDirName:"CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b",slug:"/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/jenkins\u7ed3\u5408",permalink:"/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/jenkins\u7ed3\u5408",draft:!1,editUrl:"https://github.com/AGou-ops/myDocsv4/edit/main/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/jenkins\u7ed3\u5408.md",tags:[],version:"current",frontMatter:{},sidebar:"cloudNative",previous:{title:"helm\u5b89\u88c5zookeeper\u96c6\u7fa4",permalink:"/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/helm\u5b89\u88c5zookeeper\u96c6\u7fa4"},next:{title:"k8s\u4e2d\u4f7f\u7528traefik\uff08\u57fa\u7840\uff09",permalink:"/docs/CloudNative/k8s/\u5b9e\u6218\u6848\u4f8b/k8s\u4e2d\u4f7f\u7528traefik\uff08\u57fa\u7840\uff09"}},o={},c=[{value:"\u63d2\u4ef6",id:"\u63d2\u4ef6",level:2},{value:"\u914d\u7f6e\u53ca\u4f7f\u7528",id:"\u914d\u7f6e\u53ca\u4f7f\u7528",level:2},{value:"kubernetes plugin",id:"kubernetes-plugin",level:3},{value:"\u914d\u7f6e",id:"\u914d\u7f6e",level:4},{value:"\u4f7f\u7528\u793a\u4f8b",id:"\u4f7f\u7528\u793a\u4f8b",level:4},{value:"\u9644-\u751f\u6210jenkins sa\u53catoken",id:"\u9644-\u751f\u6210jenkins-sa\u53catoken",level:4},{value:"kubernetes CLI",id:"kubernetes-cli",level:3},{value:"Config FIle Provider",id:"config-file-provider",level:3},{value:"\u9644-pipeline\u793a\u4f8b",id:"\u9644-pipeline\u793a\u4f8b",level:2},{value:"\u53c2\u8003\u94fe\u63a5",id:"\u53c2\u8003\u94fe\u63a5",level:2}],u={toc:c};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"\u63d2\u4ef6"},"\u63d2\u4ef6"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://plugins.jenkins.io/kubernetes"},"Kubernetes plugin"),"\uff1a\u7528\u4e8e\u8fde\u63a5k8s\u96c6\u7fa4\uff0c\u8fd0\u884cagent\u3001\u6253\u5305\u6784\u5efa\u63a8\u9001\u955c\u50cf\u3001\u8fd0\u884chelm\u547d\u4ee4\u7b49\uff1b"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://plugins.jenkins.io/kubernetes-cli"},"Kubernetes CLI Plugin"),"\uff1akubectl\u5de5\u5177\u8c03\u7528\uff1b"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://plugins.jenkins.io/config-file-provider"},"Config File Provider Plugin"),"\uff1a\u5168\u5c40\u7684\u4e00\u4e2a\u914d\u7f6e\u6587\u4ef6\u63d2\u4ef6\uff0c\u63d0\u4f9b \u4f8b\u5982maven\u7684setting.xml\u6587\u4ef6\u7b49\uff1b")),(0,r.kt)("h2",{id:"\u914d\u7f6e\u53ca\u4f7f\u7528"},"\u914d\u7f6e\u53ca\u4f7f\u7528"),(0,r.kt)("h3",{id:"kubernetes-plugin"},"kubernetes plugin"),(0,r.kt)("h4",{id:"\u914d\u7f6e"},"\u914d\u7f6e"),(0,r.kt)("p",null,"\u5728jenkins\u4e2d\u4f9d\u6b21\u6253\u5f00\uff0c",(0,r.kt)("inlineCode",{parentName:"p"},"\u7ba1\u7406jenkins"),"--\x3e ",(0,r.kt)("inlineCode",{parentName:"p"},"Nodes")," --\x3e ",(0,r.kt)("inlineCode",{parentName:"p"},"Clouds")," --\x3e ",(0,r.kt)("inlineCode",{parentName:"p"},"New Cloud"),"\n",(0,r.kt)("img",{parentName:"p",src:"https://cdn.agou-ops.cn/others/20230912095924.png",alt:"image.png"}),"\n",(0,r.kt)("img",{parentName:"p",src:"https://cdn.agou-ops.cn/others/20230912100649.png",alt:"image.png"}),"\n\u5173\u952e\u914d\u7f6e\u9879\u6709\u4ee5\u4e0b\u51e0\u4e2a\uff1a"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Kubernetes URL\uff1a\u586b\u5199k8s\u7684API server\u5730\u5740\uff0c\u53ef\u4ee5\u7528FQDN\u6216\u8005IP"),(0,r.kt)("li",{parentName:"ul"},"Kubernetes server certificate key\uff1a\u8fd9\u91cc\u4e0d\u586b\u7684\u8bdd\uff0c\u4e0b\u9762\u7684\u7981\u7528https\u8bc1\u4e66\u6821\u9a8c\u8981\u5173\u6389\uff1b"),(0,r.kt)("li",{parentName:"ul"},"Credentials\uff1a\u8ba4\u8bc1token\uff0c\u8fd9\u91cc\u53ef\u4ee5\u81ea\u5df1\u4e13\u95e8\u4e3ajenkins\u521b\u5efa\u4e00\u4e2asa\uff0c\u5e76\u751f\u6210\u4e00\u4e2atoken\u4e13\u95e8\u4f7f\u7528\uff1b\u53c2\u8003","[\u9644-\u751f\u6210jenkins sa\u53catoken]","(#\u9644-\u751f\u6210jenkins sa\u53catoken)"),(0,r.kt)("li",{parentName:"ul"},"Pod Templates:",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre"},"- name: \u540d\u5b57\u53ef\u4ee5\u4e3a\u7a7a\uff0c\u9ed8\u8ba4\u4f1a\u81ea\u52a8\u751f\u6210\uff0c\u683c\u5f0f\u4e3a`jenkins-agent-<\u968f\u673a\u5b50\u4e32>\n- namespace: \u8fd0\u884c\u7684\u540d\u79f0\u7a7a\u95f4\uff1b\n- Labels\uff1a\u6807\u7b7e\uff0c\u540e\u9762\u6d41\u6c34\u7ebf\u4e2d\u53ef\u4ee5\u4f7f\u7528\uff1b\n- Containers\uff1a\n    - name: \u5bb9\u5668\u540d\u79f0\uff1b\n    - Docker image\uff1a`jenkins/jnlp-slave:latest-jdk11`\n")),"\u914d\u7f6e\u5b8c\u6210\u4e4b\u540e\u53ef\u4ee5\u70b9\u51fb\u6d4b\u8bd5k8s\u8fde\u63a5\uff0c\u5982\u679c\u901a\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u5728\u6d41\u6c34\u7ebf\u4e2d\u6b63\u5f0f\u4f7f\u7528\u4e86.")),(0,r.kt)("h4",{id:"\u4f7f\u7528\u793a\u4f8b"},"\u4f7f\u7528\u793a\u4f8b"),(0,r.kt)("p",null,"\u65b0\u5efajenkins pipeline\u4f5c\u4e1a\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"podTemplate(label: 'jnlp-agent',cloud: 'local-k8s' ){\n    // \u5728\u4ee3\u7406\u8282\u70b9\u4e0a\u8fd0\u884c\u811a\u672c\n    node ('jnlp-agent') {\n        echo \"Running in k8s cluster...\"\n    }\n}\n")),(0,r.kt)("h4",{id:"\u9644-\u751f\u6210jenkins-sa\u53catoken"},"\u9644-\u751f\u6210jenkins sa\u53catoken"),(0,r.kt)("p",null,"\u7167\u7740\u6539\u6539\uff08\u90e8\u5206\u6458\u81ea\u5b98\u65b9github\u4ed3\u5e93\uff09\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'---\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: jenkins\n  namespace: dubbo\n\n---\nkind: ClusterRole\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: jenkins\nrules:\n- apiGroups: [""]\n  resources: ["pods"]\n  verbs: ["create","delete","get","list","patch","update","watch"]\n- apiGroups: [""]\n  resources: ["pods/exec"]\n  verbs: ["create","delete","get","list","patch","update","watch"]\n- apiGroups: [""]\n  resources: ["pods/log"]\n  verbs: ["get","list","watch"]\n- apiGroups: [""]\n  resources: ["events"]\n  verbs: ["watch"]\n- apiGroups: [""]\n  resources: ["secrets"]\n  verbs: ["get"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: jenkins\nroleRef:\n  apiGroup: rbac.authorization.k8s.io\n  kind: ClusterRole\n  name: jenkins\nsubjects:\n- kind: ServiceAccount\n  name: jenkins\n  namespace: dubbo\n---\napiVersion: v1\nkind: Secret\nmetadata:\n  name: jenkins-secret\n  namespace: dubbo\n  annotations:\n    kubernetes.io/service-account.name: jenkins\ntype: kubernetes.io/service-account-token\n')),(0,r.kt)("p",null,"\u83b7\u53d6jenkins token\uff08\u6700\u4e0b\u9762\u90a3\u4e2atoken\u5c31\u662f\uff09\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"k describe secret/jenkins-secret -n dubbo\nName:         jenkins-secret\nNamespace:    dubbo\nLabels:       <none>\nAnnotations:  kubernetes.io/service-account.name: jenkins\n              kubernetes.io/service-account.uid: 486e93a5-8ce1-4234-8d74-e948369ea75b\n\nType:  kubernetes.io/service-account-token\n\nData\n====\nca.crt:     1314 bytes\nnamespace:  5 bytes\ntoken:      eyJhbGciOiJSUzI1NiIsImtpZCI6IlhYRkQ2bmRNc0s2WktiWHYxT044M1ZfWTQ2UWRxZk81U3Q4TFJnRFo2QncifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkdWJibyIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJqZW5raW5zLXNlY3JldCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJqZW5raW5zIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNDg2ZTkzYTUtOGNlMS00MjM0LThkNzQtZTk0ODM2OWVhNzViIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmR1YmJvOmplbmtpbnMifQ.TTHyEMRkqUFCLibbnQcJiGasNuVVxUn5JT47RlTmA6DDkDVLqXICNoJY-2pOTzw0mdX53MU0AWBIq8ffxKJSeE_shozRkl6LYDJuWV2PTAJuAXf4NSiBHCeKIjwUFijmTi54y2xxQnTZ4xJAZ7xeUmswQcFBzv-K2jvKX7PzQWcXJlS525F7owFEOV0ks3JR7RuiZ_HSVudCsThjsgmkUIbceiGqXH3XtiZWC9S29wJD6uzIe8v5zcNsWxTzOBCA-PG9xW0DWIWd5hOO40SZunuE54Uf3BWv4h9EnFLtjRqr6ldKQh7taSmUdLOGL_IuFKVoDPtSrfKm8lbkTwIXeA\n\n")),(0,r.kt)("h3",{id:"kubernetes-cli"},"kubernetes CLI"),(0,r.kt)("p",null,"\u5b89\u88c5\u597d\u63d2\u4ef6\u4e4b\u540e\u5373\u53ef\u76f4\u63a5\u5728pipeline\u4e2d\u4f7f\u7528\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},"    withKubeConfig(clusterName: 'local-k8s', contextName: 'default', credentialsId: 'k8s-token', namespace: 'jenkins', restrictKubeConfigAccess: true, serverUrl: 'https://kubernetes.default.svc.cluster.local:6443') {\n    sh 'kubectl get pod -A'\n")),(0,r.kt)("h3",{id:"config-file-provider"},"Config FIle Provider"),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://cdn.agou-ops.cn/others/20230912103408.png",alt:"image.png"}),"\n\u4e3b\u8981\u7528\u9014\u5c31\u662f\u6539\u4e0bmaven\u7684\u955c\u50cf\u5730\u5740\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},"...\n <mirrors>\n  <mirror>\n    <id>nexus-public</id>\n    <mirrorOf>*</mirrorOf>\n    <name>central repository</name>\n    <url>http://nexus.nblh.local/repository/mvn-group</url>\n  </mirror>\n  </mirrors>\n...\n")),(0,r.kt)("h2",{id:"\u9644-pipeline\u793a\u4f8b"},"\u9644-pipeline\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-groovy"},'// \u6267\u884cHelm\u7684\u65b9\u6cd5\ndef helmDeploy(Map args) {\n    if(args.init){\n        println "Helm \u521d\u59cb\u5316"\n        sh "helm init --client-only --stable-repo-url ${args.url}"\n    } else if (args.dry_run) {\n        println "\u5c1d\u8bd5 Helm \u90e8\u7f72\uff0c\u9a8c\u8bc1\u662f\u5426\u80fd\u6b63\u5e38\u90e8\u7f72"\n        sh "helm upgrade --install ${args.name} --namespace ${args.namespace} ${args.values} --set ${images},${tag} stable/${args.template} --dry-run --debug"\n    } else {\n        println "\u6b63\u5f0f Helm \u90e8\u7f72"\n        sh "helm upgrade --install ${args.name} --namespace ${args.namespace} ${args.values} --set ${images},${tag} stable/${args.template}"\n    }\n}\n\n// jenkins slave \u6267\u884c\u6d41\u6c34\u7ebf\u4efb\u52a1\ntimeout(time: 600, unit: \'SECONDS\') {\n    try{\n        def label = "jnlp-agent"\n        podTemplate(label: label,cloud: \'kubernetes\' ){\n            node (label) {\n                stage(\'Git\u9636\u6bb5\'){\n                    echo "Git \u9636\u6bb5"\n                    git branch: "master" ,changelog: true , url: "https://github.com/my-dlq/springboot-helloworld.git"\n                }\n                stage(\'Maven\u9636\u6bb5\'){\n                    echo "Maven \u9636\u6bb5"\n                    container(\'maven\') {\n                        //\u8fd9\u91cc\u5f15\u7528\u4e0a\u9762\u8bbe\u7f6e\u7684\u5168\u5c40\u7684 settings.xml \u6587\u4ef6\uff0c\u6839\u636e\u5176ID\u5c06\u5176\u5f15\u5165\u5e76\u521b\u5efa\u8be5\u6587\u4ef6\n                        configFileProvider([configFile(fileId: "75884c5a-4ec2-4dc0-8d87-58b6b1636f8a", targetLocation: "settings.xml")]){\n                            sh "mvn clean install -Dmaven.test.skip=true --settings settings.xml"\n                        }\n                    }\n                }\n                stage(\'Docker\u9636\u6bb5\'){\n                    echo "Docker \u9636\u6bb5"\n                    container(\'docker\') {\n                        // \u8bfb\u53d6pom\u53c2\u6570\n                        echo "\u8bfb\u53d6 pom.xml \u53c2\u6570"\n                        pom = readMavenPom file: \'./pom.xml\'\n                        // \u8bbe\u7f6e\u955c\u50cf\u4ed3\u5e93\u5730\u5740\n                        hub = "registry.cn-shanghai.aliyuncs.com"\n                        // \u8bbe\u7f6e\u4ed3\u5e93\u9879\u76ee\u540d\n                        project_name = "mydlq"\n                        echo "\u7f16\u8bd1 Docker \u955c\u50cf"\n                        docker.withRegistry("http://${hub}", "ffb3b544-108e-4851-b747-b8a00bfe7ee0") {\n                            echo "\u6784\u5efa\u955c\u50cf"\n                            // \u8bbe\u7f6e\u63a8\u9001\u5230aliyun\u4ed3\u5e93\u7684mydlq\u9879\u76ee\u4e0b\uff0c\u5e76\u7528pom\u91cc\u9762\u8bbe\u7f6e\u7684\u9879\u76ee\u540d\u4e0e\u7248\u672c\u53f7\u6253\u6807\u7b7e\n                            def customImage = docker.build("${hub}/${project_name}/${pom.artifactId}:${pom.version}")\n                            echo "\u63a8\u9001\u955c\u50cf"\n                            customImage.push()\n                            echo "\u5220\u9664\u955c\u50cf"\n                            sh "docker rmi ${hub}/${project_name}/${pom.artifactId}:${pom.version}" \n                        }\n                    }\n                }\n                stage(\'Helm\u9636\u6bb5\'){\n                    container(\'helm-kubectl\') {\n                        withKubeConfig([credentialsId: "8510eda6-e1c7-4535-81af-17626b9575f7",serverUrl: "https://kubernetes.default.svc.cluster.local"]) {\n                            // \u8bbe\u7f6e\u53c2\u6570\n                            images = "image.repository=${hub}/${project_name}/${pom.artifactId}"\n                            tag = "image.tag=${pom.version}"\n                            template = "spring-boot"\n                            repo_url = "http://chart.mydlq.club"\n                            app_name = "${pom.artifactId}"\n                            // \u68c0\u6d4b\u662f\u5426\u5b58\u5728yaml\u6587\u4ef6\n                            def values = ""\n                            if (fileExists(\'values.yaml\')) {\n                                values = "-f values.yaml"\n                            }\n                            // \u6267\u884c Helm \u65b9\u6cd5\n                            echo "Helm \u521d\u59cb\u5316"\n                            helmDeploy(init: true ,url: "${repo_url}");\n                            echo "Helm \u6267\u884c\u90e8\u7f72\u6d4b\u8bd5"\n                            helmDeploy(init: false ,dry_run: true ,name: "${app_name}" ,namespace: "mydlqcloud" ,image: "${images}" ,tag: "${tag}" , values: "${values}" ,template: "${template}")\n                            echo "Helm \u6267\u884c\u6b63\u5f0f\u90e8\u7f72"\n                            helmDeploy(init: false ,dry_run: false ,name: "${app_name}" ,namespace: "mydlqcloud",image: "${images}" ,tag: "${tag}" , values: "${values}" ,template: "${template}")\n                        }\n                    }\n                }\n            }\n        }\n    }catch(Exception e) {\n        currentBuild.result = "FAILURE"\n    }finally {\n        // \u83b7\u53d6\u6267\u884c\u72b6\u6001\n        def currResult = currentBuild.result ?: \'SUCCESS\' \n        // \u5224\u65ad\u6267\u884c\u4efb\u52a1\u72b6\u6001\uff0c\u6839\u636e\u4e0d\u540c\u72b6\u6001\u53d1\u9001\u90ae\u4ef6\n        stage(\'email\'){\n            if (currResult == \'SUCCESS\') {\n                echo "\u53d1\u9001\u6210\u529f\u90ae\u4ef6"\n                emailext(subject: \'\u4efb\u52a1\u6267\u884c\u6210\u529f\',to: \'3*****7@qq.com\',body: \'\'\'\u4efb\u52a1\u5df2\u7ecf\u6210\u529f\u6784\u5efa\u5b8c\u6210...\'\'\')\n            }else {\n                echo "\u53d1\u9001\u5931\u8d25\u90ae\u4ef6"\n                emailext(subject: \'\u4efb\u52a1\u6267\u884c\u5931\u8d25\',to: \'3*****7@qq.com\',body: \'\'\'\u4efb\u52a1\u6267\u884c\u5931\u8d25\u6784\u5efa\u5931\u8d25...\'\'\')\n            }\n        }\n    }\n}\n')),(0,r.kt)("h2",{id:"\u53c2\u8003\u94fe\u63a5"},"\u53c2\u8003\u94fe\u63a5"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/my-dlq/springboot-helloworld/"},"GitHub - my-dlq/springboot-helloworld: This project is the mirror docker image of Helm Chart template."))))}p.isMDXComponent=!0}}]);